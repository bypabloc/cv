---
import Section from "@/components/Section.astro";
import { getProjects } from "@/utils/db/getProjects";
import { useTranslations } from "@/i18n/utils";

const { user, lang } = Astro.props;

const { isValid, data = {} } = await getProjects({ user, languageCode: lang });
const projects = isValid ? data?.projects : [];

const hasProjects = projects.length > 0;

const t = useTranslations(lang);
---

{
  hasProjects && (
    <Section title={t("projects.title")}>
      <div class="cards">
        {projects.map(
          ({
            url,
            description,
            highlights,
            name,
            serviceStatus,
            github,
            urls,
          }) => {
            return (
              <div>
                <article class="nyx-color2-text-primary-on">
                  <header>
                    <div class="d-flex flex-direction-row flex-justify-space-between flex-align-items-center">
                      <h3 class="nyx-color2-text-primary-base">
                        <p>{name}</p>
                      </h3>
                      {serviceStatus === "active" && (
                        <span title="Proyecto activo"> ðŸŸ¢</span>
                      )}
                      {serviceStatus === "inactive" && (
                        <span title="Proyecto inactivo"> ðŸ”´</span>
                      )}
                    </div>
                    <p>{description}</p>
                  </header>
                  <div>
                    <div>
                      {urls &&
                        urls.map(({ type, url, icons }) => {
                          const iconClasses = Object.entries(icons)
                            .map(([key, value]) =>
                              key === "default" ? value : `${key}:${value}`
                            )
                            .join(" ");
                          return (
                            <a
                              class={`github-code-link ${iconClasses}`}
                              href={url}
                              target="_blank"
                              title={`Ver ${name}`}
                            >
                              <i class={iconClasses} />
                            </a>
                          );
                        })}
                    </div>
                  </div>
                  <footer>
                    {highlights.map((highlight) => {
                      return <span>{highlight}</span>;
                    })}
                  </footer>
                </article>
              </div>
            );
          }
        )}
      </div>
    </Section>
  )
}

<style>
  .cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-inline: -16px;
  }

  article {
    border-radius: 8px;
    border: 1px solid;
    gap: 16px;
    display: flex;
    flex-direction: column;
    padding: 16px;
    height: 100%;
  }

  article header {
    flex: 1;
  }

  article h3 {
    margin-bottom: 4px;
  }

  article a {
  }

  article a:hover {
    text-decoration: underline;
  }

  article header h3 p {
    font-size: 1rem;
    font-weight: 500;
    line-height: 1.2rem;
    margin-bottom: 4px;
  }

  article header div span {
    animation-name: flicker;
    animation-duration: 3s;
    animation-timing-function: ease-in;
    animation-iteration-count: infinite;
  }

  footer {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    font-size: 0.6rem;
  }

  footer span {
    border-radius: 6px;
    font-size: 0.6rem;
    font-weight: 500;
    padding: 0.2rem 0.6rem;
  }

  .github-code-link {
    margin-left: 5px;
  }

  @keyframes flicker {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.25;
    }
    100% {
      opacity: 1;
    }
  }

  @media (width <= 700px) {
    ul {
      margin-inline: 0px;
    }

    article {
      border: none;
      box-shadow: 0 1px 1px;
      padding: 0 0 16px 0;
    }
  }

  @media print {
    article h3 span {
      animation-name: none;
    }
  }
</style>
