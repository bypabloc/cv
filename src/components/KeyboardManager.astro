---
import "hotkeypad/reset.css";
import "hotkeypad/index.css";
import { getAttributes } from "@/utils/db/getAttributes";
import { getUserNetworks } from "@/utils/db/getUserNetworks";

const { user } = Astro.props;

const attributesResult = await getAttributes(user);
const attributes = attributesResult.isValid
  ? attributesResult.data?.attributes
  : {};

const networksResult = await getUserNetworks(user, attributes);
const networks = networksResult.isValid ? networksResult.data?.networks : [];

const reservedHotkeys = ["T", "N", "W", "R", "S", "F", "H", "B", "P"];
const usedHotkeys = new Set();

const getValidHotkey = (codeName) => {
  // Primero, intenta con las letras del codeName
  for (const char of codeName) {
    const letter = char.toUpperCase();
    if (!reservedHotkeys.includes(letter) && !usedHotkeys.has(letter)) {
      usedHotkeys.add(letter);
      return `ctrl+${letter}`;
    }
  }

  // Si ninguna letra del codeName está disponible, busca en todo el alfabeto
  for (let i = 65; i <= 90; i++) {
    // ASCII codes for A-Z
    const letter = String.fromCharCode(i);
    if (!reservedHotkeys.includes(letter) && !usedHotkeys.has(letter)) {
      usedHotkeys.add(letter);
      return `ctrl+${letter}`;
    }
  }

  // Si todas las letras están reservadas o usadas, devolver una combinación especial
  return "ctrl+Shift+?"; // Ajusta esto según tu necesidad
};

const profilesInfo = networks.map(({ codeName, name, webUrl, icons }) => {
  const hotkey = getValidHotkey(codeName);

  return {
    id: codeName,
    section: "Social",
    title: `Visitar ${name}`,
    url: webUrl,
    icon: icons.length > 0 ? icons.join(" ") : "",
    hotkey,
  };
});
---

<footer id="normal-footer" class="no-print">
  Pulsa <kbd>Cmd</kbd> + <kbd>K</kbd> para abrir la paleta de comandos.
</footer>

<div id="footer-button" class="no-print">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="icon icon-tabler icon-tabler-command"
    width="32"
    height="32"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="#777"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <path
      d="M7 9a2 2 0 1 1 2 -2v10a2 2 0 1 1 -2 -2h10a2 2 0 1 1 -2 2v-10a2 2 0 1 1 2 2h-10"
    ></path>
  </svg>
</div>

<div
  id="hotkeypad"
  data-placeholder="Buscar comando"
  data-info={JSON.stringify(profilesInfo)}
>
</div>

<script>
  interface Info {
    id: string;
    section: string;
    title: string;
    url: string;
    icon: string;
    hotkey: string;
    handler?: () => void;
  }

  import HotKeyPad from "hotkeypad";

  const hotkeypad = new HotKeyPad();
  const info = hotkeypad.instance.getAttribute("data-info") ?? "[]";
  const parsedInfo = JSON.parse(info) as Info[];

  const data = parsedInfo.map(({ url, hotkey, icon, id, section, title }) => {
    return {
      id,
      title,
      icon: `<i
        class="${icon}"
        aria-hidden="true"
      ></i>`,
      hotkey,
      section,
      handler: () => {
        window.open(url, "_blank");
      },
    };
  });
  hotkeypad.setCommands([
    {
      id: "print",
      title: "Imprimir",
      icon: `<svg style="margin-right: 8px" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
</svg>`,
      hotkey: "ctrl+P",
      section: "Acciones",
      handler: () => {
        window.print();
      },
    },
    ...data,
  ]);

  const footerButton = document.getElementById("footer-button");
  footerButton?.addEventListener("click", () => {
    var event = new KeyboardEvent("keydown", {
      key: "K",
      code: "KeyK",
      keyCode: 75,
      which: 75,
      ctrlKey: true,
      altKey: false,
      shiftKey: false,
      metaKey: false,
    });

    document.dispatchEvent(event);
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (min-width: 601px) {
    #normal-footer {
      display: block;
    }

    #footer-button {
      display: none;
    }
  }

  @media (max-width: 600px) {
    #normal-footer {
      display: none;
    }

    #footer-button {
      background: #fff;
      position: fixed;
      border: 1px solid #eee;
      right: 10px;
      bottom: 10px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
  }

  footer {
    background: #fdfdfd;
    border-top: 1px solid #eee;
    position: fixed;
    bottom: 0px;
    width: 100%;
    padding-block: 8px;
    text-align: center;
    font-size: 0.85rem;

    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }

  kbd {
    background: #eee;
    border-radius: 4px;
    padding: 2px 4px;
    font-size: 12px;
  }
</style>
